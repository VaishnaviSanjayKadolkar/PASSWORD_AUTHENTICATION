module processor (
    input clk,
    input reset,
    output [31:0] pc_out,
    output [31:0] instruction_out,
    output [31:0] alu_result_out
);

    // === Wires ===
    wire [31:0] pc, next_pc;
    wire [31:0] instruction;
    wire [4:0] rs1, rs2, rd;
    wire [31:0] regData1, regData2, aluIn2;
    wire [31:0] aluResult;
    wire [31:0] memReadData;
    wire [31:0] writeBackData;
    wire regWrite, memRead, memWrite, branch, aluSrc;
    wire [6:0] opcode;
    wire [3:0] aluControl;
    wire [3:0] password_input;
    wire auth_success;

    assign opcode = instruction[6:0];
    assign rs1 = instruction[19:15];
    assign rs2 = instruction[24:20];
    assign rd  = instruction[11:7];
    wire [31:0] imm = {{20{instruction[31]}}, instruction[31:20]};
    assign aluIn2 = aluSrc ? imm : regData2;

    ProgramCounter pc_reg (
        .clk(clk),
        .reset(reset),
        .next_pc(next_pc),
        .pc(pc)
    );

    InstructionMemory imem (
        .addr(pc),
        .instruction(instruction)
    );

    ControlUnit cu (
        .opcode(opcode),
        .regWrite(regWrite),
        .memRead(memRead),
        .memWrite(memWrite),
        .branch(branch),
        .aluSrc(aluSrc)
    );

    RegisterFile rf (
        .clk(clk),
        .regWrite(regWrite),
        .rs1(rs1),
        .rs2(rs2),
        .rd(rd),
        .writeData(writeBackData),
        .readData1(regData1),
        .readData2(regData2)
    );

    assign aluControl = 4'b0000; // ADD

    ALU alu (
        .a(regData1),
        .b(aluIn2),
        .aluControl(aluControl),
        .result(aluResult)
    );

    DataMemory dmem (
        .clk(clk),
        .memRead(memRead),
        .memWrite(memWrite),
        .addr(aluResult),
        .writeData(regData2),
        .readData(memReadData),
        .auth_success(auth_success),
        .password_input(password_input)
    );

    password_auth auth_module (
        .clk(clk),
        .rst(reset),
        .user_input(password_input),
        .auth_success(auth_success)
    );

    assign writeBackData = memRead ? memReadData : aluResult;
    assign next_pc = pc + 4;
    assign pc_out = pc;
    assign instruction_out = instruction;
    assign alu_result_out = aluResult;

endmodule

module ProgramCounter (
    input clk,
    input reset,
    input [31:0] next_pc,
    output reg [31:0] pc
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            pc <= 0;
        else
            pc <= next_pc;
    end
endmodule

module InstructionMemory (
    input [31:0] addr,
    output [31:0] instruction
);
    reg [31:0] memory [0:255];
    initial $readmemh("program.hex", memory);
    assign instruction = memory[addr[9:2]];
endmodule

module RegisterFile (
    input clk,
    input regWrite,
    input [4:0] rs1, rs2, rd,
    input [31:0] writeData,
    output [31:0] readData1, readData2
);
    reg [31:0] regs [0:31];
    assign readData1 = regs[rs1];
    assign readData2 = regs[rs2];
    always @(posedge clk) begin
        if (regWrite && rd != 0)
            regs[rd] <= writeData;
    end
endmodule

module ALU (
    input [31:0] a, b,
    input [3:0] aluControl,
    output reg [31:0] result
);
    always @(*) begin
        case (aluControl)
            4'b0000: result = a + b;
            4'b0001: result = a - b;
            4'b0010: result = a * b;
            4'b0101: result = a & b;
            4'b0110: result = a | b;
            4'b0111: result = a ^ b;
            4'b1010: result = a >>> b;
            4'b1011: result = a << b;
            default: result = 0;
        endcase
    end
endmodule

module DataMemory (
    input clk,
    input memRead, memWrite,
    input [31:0] addr, writeData,
    output [31:0] readData,
    input auth_success,
    output reg [3:0] password_input
);
    reg [31:0] memory [0:254]; // 0x00 to 0xFE (exclude 0xFF)
    wire is_auth_addr = (addr[9:2] == 8'hFF);

    always @(posedge clk) begin
        if (memWrite && !is_auth_addr)
            memory[addr[9:2]] <= writeData;
        else if (memWrite && is_auth_addr)
            password_input <= writeData[3:0];
    end

    assign readData = (memRead && is_auth_addr) ? {31'b0, auth_success} :
                      (memRead && !is_auth_addr) ? memory[addr[9:2]] : 32'b0;
endmodule

module password_auth (
    input wire clk,
    input wire rst,
    input wire [3:0] user_input,
    output reg auth_success
);
    parameter [3:0] STORED_PASSWORD = 4'b1011;

    always @(posedge clk or posedge rst) begin
        if (rst)
            auth_success <= 1'b0;
        else
            auth_success <= (user_input == STORED_PASSWORD);
    end
endmodule

module ControlUnit (
    input [6:0] opcode,
    output reg regWrite, memRead, memWrite, branch, aluSrc
);
    always @(*) begin
        case (opcode)
            7'b0110011: begin // R-type
                regWrite = 1; aluSrc = 0;
                memRead = 0; memWrite = 0; branch = 0;
            end
            7'b0000011: begin // Load
                regWrite = 1; aluSrc = 1;
                memRead = 1; memWrite = 0; branch = 0;
            end
            7'b0100011: begin // Store
                regWrite = 0; aluSrc = 1;
                memRead = 0; memWrite = 1; branch = 0;
            end
            7'b1100011: begin // Branch
                regWrite = 0; aluSrc = 0;
                memRead = 0; memWrite = 0; branch = 1;
            end
            default: begin
                regWrite = 0; aluSrc = 0;
                memRead = 0; memWrite = 0; branch = 0;
            end
        endcase
    end
endmodule